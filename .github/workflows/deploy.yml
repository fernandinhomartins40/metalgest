name: Deploy MetalGest - Node.js + SQLite - VPS 72.60.10.112

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Deploy Completo
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies and build
        run: |
          # Build Frontend
          cd apps/web
          echo "VITE_API_URL=http://72.60.10.112:3010/api" > .env.production
          npm ci
          npm run build
          
          # Verificar builds
          echo "✅ Frontend build:"
          ls -la dist/
          echo "✅ Backend files:"
          cd ../../
          ls -la backend/

      - name: Install sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass

      - name: Deploy to VPS
        env:
          VPS_PASSWORD: ${{ secrets.VPS_PASSWORD }}
        run: |
          # Configurar variáveis
          VPS_HOST="72.60.10.112"
          VPS_USER="root"
          DEPLOY_PATH="/var/www/metalgest"
          
          echo "🚀 Iniciando deploy para VPS ${VPS_HOST}:3010"
          
          # Função para executar comandos SSH
          ssh_exec() {
            sshpass -p "$VPS_PASSWORD" ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=30 "$VPS_USER@$VPS_HOST" "$1"
          }
          
          # Função para copiar arquivos
          scp_copy() {
            sshpass -p "$VPS_PASSWORD" scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=30 -r "$1" "$VPS_USER@$VPS_HOST:$2"
          }
          
          # 1. Preparar diretórios na VPS
          echo "📁 Preparando diretórios na VPS..."
          if ! ssh_exec "mkdir -p $DEPLOY_PATH && cd $DEPLOY_PATH && rm -rf * .* 2>/dev/null || true && mkdir -p frontend backend nginx"; then
            echo "❌ Erro ao preparar diretórios"
            exit 1
          fi
          echo "✅ Diretórios preparados"
          
          # 2. Copiar arquivos essenciais
          echo "📦 Copiando arquivos para VPS..."
          
          echo "📦 Copiando docker-compose.yml..."
          if ! scp_copy "docker-compose.yml" "$DEPLOY_PATH/"; then
            echo "❌ Erro ao copiar docker-compose.yml"
            exit 1
          fi
          
          echo "📦 Copiando nginx..."
          if ! scp_copy "nginx/" "$DEPLOY_PATH/"; then
            echo "❌ Erro ao copiar nginx"
            exit 1
          fi
          
          echo "📦 Copiando frontend..."
          if ! scp_copy "apps/web/dist/" "$DEPLOY_PATH/frontend/"; then
            echo "❌ Erro ao copiar frontend"
            exit 1
          fi
          
          echo "📦 Copiando backend..."
          if ! scp_copy "backend/" "$DEPLOY_PATH/backend/"; then
            echo "❌ Erro ao copiar backend"
            exit 1
          fi
          
          echo "✅ Arquivos copiados com sucesso"
          
          # 3. Instalar Node.js na VPS (se necessário)
          echo "📦 Verificando Node.js na VPS..."
          ssh_exec "
            if ! command -v node &> /dev/null; then
              echo '📥 Instalando Node.js 18...'
              curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
              apt-get install -y nodejs
            fi
            
            if ! command -v pm2 &> /dev/null; then
              echo '📥 Instalando PM2...'
              npm install -g pm2
            fi
            
            if ! command -v nginx &> /dev/null; then
              echo '📥 Instalando Nginx...'
              apt-get update -y
              apt-get install -y nginx
              systemctl enable nginx
            fi
            
            echo '✅ Ferramentas instaladas:'
            node --version
            npm --version
            pm2 --version
            nginx -v
          "
          
          # 4. Configurar ambiente e fazer deploy
          echo "⚙️ Configurando ambiente e fazendo deploy..."
          ssh_exec "
            cd $DEPLOY_PATH
            
            # Criar arquivo .env para o backend
            cat > backend/.env << EOF
          NODE_ENV=production
          PORT=3010
          JWT_SECRET=metalgest-jwt-secret-production-$(date +%s)
          REFRESH_TOKEN_SECRET=metalgest-refresh-secret-production-$(date +%s)
          DATABASE_PATH=./src/database/sqlite.db
          EOF
            
            echo '✅ Arquivo .env do backend criado'
            
            # Parar aplicação existente
            echo '🛑 Parando aplicação existente...'
            pm2 delete metalgest-backend 2>/dev/null || true
            
            # Fazer backup
            echo '💾 Criando backup...'
            TIMESTAMP=\$(date +\"%Y%m%d_%H%M%S\")
            mkdir -p /var/www/metalgest-backup
            if [ -d \"/var/www/metalgest-backup/deploy-current\" ]; then
              mv /var/www/metalgest-backup/deploy-current /var/www/metalgest-backup/deploy-\$TIMESTAMP
            fi
            cp -r $DEPLOY_PATH /var/www/metalgest-backup/deploy-current
            
            # Instalar dependências do backend
            echo '📦 Instalando dependências do backend...'
            cd $DEPLOY_PATH/backend
            npm install --production
            
            # Migrar e popular banco de dados
            echo '🗄️ Configurando banco de dados...'
            npm run migrate
            npm run seed
            
            # Iniciar backend com PM2
            echo '🔧 Iniciando backend...'
            pm2 start server.js --name \"metalgest-backend\" --env production
            
            # Aguardar backend
            echo '⏳ Aguardando backend...'
            for i in {1..30}; do
              if curl -s -f http://localhost:3010/api/health >/dev/null 2>&1; then
                echo \"✅ Backend pronto após \$i tentativas\"
                break
              fi
              echo \"Tentativa \$i/30...\"
              sleep 3
            done
            
            # Configurar Nginx
            echo '🌐 Configurando Nginx...'
            cat > /etc/nginx/sites-available/metalgest << 'NGINXEOF'
          server {
              listen 80;
              server_name 72.60.10.112;
              
              # Security headers
              add_header X-Frame-Options \"SAMEORIGIN\" always;
              add_header X-Content-Type-Options \"nosniff\" always;
              add_header X-XSS-Protection \"1; mode=block\" always;
              add_header Referrer-Policy \"strict-origin-when-cross-origin\" always;
              
              # Client max body size
              client_max_body_size 10M;
              
              # Frontend estático
              location / {
                  root $DEPLOY_PATH/frontend;
                  index index.html;
                  try_files \$uri \$uri/ /index.html;
                  
                  # CORS headers for frontend
                  add_header Access-Control-Allow-Origin \"*\" always;
                  add_header Access-Control-Allow-Methods \"GET, POST, PUT, DELETE, OPTIONS\" always;
                  add_header Access-Control-Allow-Headers \"Accept, Authorization, Content-Type, X-Requested-With\" always;
              }
              
              # Favicon específico
              location /favicon.ico {
                  root $DEPLOY_PATH/frontend;
                  expires 1y;
                  add_header Cache-Control \"public, immutable\";
                  access_log off;
                  log_not_found off;
              }
              
              # Static assets com cache
              location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)\$ {
                  root $DEPLOY_PATH/frontend;
                  expires 1y;
                  add_header Cache-Control \"public, immutable\";
                  access_log off;
              }
              
              # API Backend
              location /api/ {
                  proxy_pass http://localhost:3010;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade \$http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
                  proxy_cache_bypass \$http_upgrade;
                  
                  # CORS para API
                  add_header Access-Control-Allow-Origin \"http://72.60.10.112\" always;
                  add_header Access-Control-Allow-Methods \"GET, POST, PUT, DELETE, OPTIONS, PATCH\" always;
                  add_header Access-Control-Allow-Headers \"Accept, Authorization, Content-Type, X-Requested-With\" always;
                  add_header Access-Control-Allow-Credentials true always;
              }
              
              # Handle preflight requests
              location /api/options {
                  add_header Access-Control-Allow-Origin \"http://72.60.10.112\" always;
                  add_header Access-Control-Allow-Methods \"GET, POST, PUT, DELETE, OPTIONS, PATCH\" always;
                  add_header Access-Control-Allow-Headers \"Accept, Authorization, Content-Type, X-Requested-With\" always;
                  add_header Access-Control-Allow-Credentials true always;
                  add_header Content-Length 0;
                  add_header Content-Type text/plain;
                  return 204;
              }
              
              # File uploads
              location /uploads/ {
                  proxy_pass http://localhost:3010;
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
              }
              
              # Block sensitive files
              location ~ /\\. {
                  deny all;
                  access_log off;
                  log_not_found off;
              }
              
              location ~ \\.(env|log|git)\$ {
                  deny all;
                  access_log off;
                  log_not_found off;
              }
          }
          NGINXEOF
            
            # Verificar arquivos copiados e definir permissões
            echo '📁 Verificando arquivos e definindo permissões...'
            ls -la $DEPLOY_PATH/
            ls -la $DEPLOY_PATH/frontend/
            
            # Definir permissões corretas
            chown -R www-data:www-data $DEPLOY_PATH/frontend/
            chmod -R 755 $DEPLOY_PATH/frontend/
            chmod -R 644 $DEPLOY_PATH/frontend/*
            
            # Ativar site
            ln -sf /etc/nginx/sites-available/metalgest /etc/nginx/sites-enabled/
            rm -f /etc/nginx/sites-enabled/default
            nginx -t && systemctl reload nginx
            
            # Salvar configuração PM2
            pm2 save
            pm2 startup
            
            # Testes finais
            echo '🧪 Testando aplicação...'
            
            if curl -s -f http://localhost/api/health >/dev/null 2>&1; then
              echo \"✅ Aplicação funcionando em http://72.60.10.112\"
              echo \"✅ API health check: OK\"
              echo \"\"
              echo \"🎉 DEPLOY CONCLUÍDO COM SUCESSO!\"
              echo \"🌐 Aplicação disponível em: http://72.60.10.112\"
              echo \"📊 Health check: http://72.60.10.112/api/health\"
              echo \"🔧 Backend rodando na porta 3010\"
              echo \"📁 Frontend servido pelo Nginx\"
              echo \"\"
            else
              echo \"❌ Falha no health check\"
              echo \"Logs do PM2:\"
              pm2 logs metalgest-backend --lines 10
              echo \"Status do Nginx:\"
              systemctl status nginx
              exit 1
            fi
          "
          
          echo "✅ Deploy finalizado com sucesso!"