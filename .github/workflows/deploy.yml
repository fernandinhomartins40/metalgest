name: Deploy to Hostinger VPS

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build Application
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Build Frontend
        run: |
          npm install
          npm run build

      - name: Build Backend
        run: |
          cd backend
          npm install
          npm run build

      - name: Upload Frontend Artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: dist

      - name: Upload Backend Artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-dist
          path: backend/dist

  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Download Frontend Artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist

      - name: Download Backend Artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-dist
          path: backend/dist

      - name: Checkout code for deploy files
        uses: actions/checkout@v4
        with:
          path: source
          
      - name: Transfer files to VPS
        uses: appleboy/scp-action@master
        with:
          host: 31.97.85.98
          username: root
          password: ${{ secrets.VPS_PASSWORD }}
          source: "source/Dockerfile,source/docker-compose.yml,source/nginx.conf,source/nginx-initial.conf,source/ssl-renewal.sh,source/backend/package.json,source/backend/prisma,frontend/dist,backend/dist"
          target: "/var/www/metalgest"
          strip_components: 1

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: 31.97.85.98
          username: root
          password: ${{ secrets.VPS_PASSWORD }}
          script: |
            cd /var/www/metalgest
            
            # === Install Docker and Docker Compose ===
            echo "=== Installing Docker and Docker Compose ==="
            
            # Update system
            apt-get update -y
            
            # Install Docker if not present
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              curl -fsSL https://get.docker.com -o get-docker.sh
              sh get-docker.sh
              systemctl enable docker
              systemctl start docker
              rm get-docker.sh
            else
              echo "✅ Docker already installed"
            fi
            
            # Install Docker Compose if not present
            if ! command -v docker-compose &> /dev/null; then
              echo "Installing Docker Compose..."
              curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              chmod +x /usr/local/bin/docker-compose
              ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose
            else
              echo "✅ Docker Compose already installed"
            fi
            
            # Verify installations
            docker --version
            docker-compose --version
            
            # === Configure Environment Variables ===
            echo "=== Configuring Environment ==="
            
            # Set default values if secrets are not defined
            DB_NAME="${{ secrets.DB_NAME }}"
            DB_USER="${{ secrets.DB_USER }}"
            DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
            JWT_SECRET="${{ secrets.JWT_SECRET }}"
            JWT_REFRESH_SECRET="${{ secrets.JWT_REFRESH_SECRET }}"
            
            # Use defaults if secrets are empty
            DB_NAME=${DB_NAME:-"metalgest"}
            DB_USER=${DB_USER:-"postgres"}
            DB_PASSWORD=${DB_PASSWORD:-"postgres123"}
            JWT_SECRET=${JWT_SECRET:-"your-super-secret-jwt-key-change-in-production"}
            JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET:-"your-super-secret-refresh-jwt-key-change-in-production"}
            
            # Create environment file
            echo "Creating .env file..."
            cat > .env << EOF
            NODE_ENV=production
            PORT=3006
            API_VERSION=v1
            JWT_SECRET=${JWT_SECRET}
            JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
            DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
            CORS_ORIGIN=*
            POSTGRES_DB=${DB_NAME}
            POSTGRES_USER=${DB_USER}
            POSTGRES_PASSWORD=${DB_PASSWORD}
            ENCRYPTION_KEY=your-encryption-key-32-characters-long
            EOF
            
            echo "✅ Environment file created successfully"
            echo "Database config: ${DB_USER}@db:5432/${DB_NAME}"
            
            # === Setup Nginx Configuration ===
            echo "=== Setting up Nginx ==="
            if [ -f nginx-initial.conf ]; then
              sed -i "s/PORT_PLACEHOLDER/3006/g" nginx-initial.conf
              cp nginx-initial.conf nginx.conf
              echo "✅ Nginx configuration updated"
            else
              echo "⚠️ nginx-initial.conf not found, using default nginx.conf"
            fi
            
            # === Clean Up Previous Deployment ===
            echo "=== Cleaning up previous deployment ==="
            
            # Stop and remove containers
            docker-compose down -v 2>/dev/null || echo "No containers to stop"
            
            # Remove unused images and volumes
            docker system prune -f 2>/dev/null || echo "Docker cleanup completed"
            
            # Stop system nginx if running
            systemctl stop nginx 2>/dev/null || echo "System nginx not running"
            
            # === Deploy Application ===
            echo "=== Deploying application ==="
            
            # Build and start containers
            docker-compose up -d --build --force-recreate
            
            # Wait for database to be ready
            echo "=== Waiting for database ==="
            for i in {1..60}; do
              if docker-compose exec -T db pg_isready -U ${DB_USER} -d ${DB_NAME} 2>/dev/null; then
                echo "✅ Database is ready after ${i} attempts"
                break
              fi
              echo "Database not ready, attempt ${i}/60..."
              sleep 2
            done
            
            # Check database status
            if ! docker-compose exec -T db pg_isready -U ${DB_USER} -d ${DB_NAME} 2>/dev/null; then
              echo "❌ Database failed to start, checking logs..."
              docker-compose logs db --tail=30
              exit 1
            fi
            
            # === Run Database Migrations ===
            echo "=== Running Prisma migrations ==="
            
            # Wait a bit more for backend container
            sleep 10
            
            # Generate and deploy Prisma migrations
            if docker-compose exec -T backend npx prisma migrate deploy; then
              echo "✅ Prisma migrations completed successfully"
            else
              echo "⚠️ Prisma migrations failed, trying to generate and push..."
              docker-compose exec -T backend npx prisma db push --force-reset || echo "Database push failed"
            fi
            
            # === Wait for Backend ===
            echo "=== Waiting for backend service ==="
            
            # Wait for backend to be fully ready
            for i in {1..60}; do
              if docker-compose exec -T backend curl -f http://localhost:3006/api/v1/health 2>/dev/null; then
                echo "✅ Backend is ready after ${i} attempts"
                break
              fi
              echo "Backend not ready, attempt ${i}/60..."
              sleep 3
            done
            
            # === Health Checks ===
            echo "=== Running health checks ==="
            
            # Check container status
            echo "Container Status:"
            docker-compose ps
            
            # Check backend logs
            echo "=== Backend Logs (last 20 lines) ==="
            docker-compose logs backend --tail=20
            
            # Test backend directly
            echo "=== Testing Backend Direct Access ==="
            if docker-compose exec -T backend curl -f http://localhost:3006/api/v1/health; then
              echo "✅ Backend direct access working"
            else
              echo "❌ Backend direct access failed"
              echo "Environment variables in backend:"
              docker-compose exec -T backend printenv | grep -E "(PORT|NODE_ENV|DATABASE_URL)" || echo "No env vars found"
              echo "Process list in backend:"
              docker-compose exec -T backend ps aux || echo "ps command not available"
            fi
            
            # Test through nginx proxy
            echo "=== Testing Nginx Proxy ==="
            if curl -f http://localhost:80/api/v1/health 2>/dev/null; then
              echo "✅ Nginx proxy working"
            else
              echo "❌ Nginx proxy failed, checking nginx logs..."
              docker-compose logs nginx --tail=20
            fi
            
            # === Final Status ===
            echo "=== Deployment Summary ==="
            
            # Show all container statuses
            docker-compose ps
            
            # Test final connectivity
            if curl -f http://localhost:80/api/v1/health 2>/dev/null; then
              echo "🎉 Deploy successful! API is accessible through nginx on port 80"
              echo "🌐 Application should be available at: http://31.97.85.98"
            else
              echo "❌ Deployment completed but API is not accessible"
              echo "📋 Full logs for debugging:"
              docker-compose logs --tail=30
              exit 1
            fi
