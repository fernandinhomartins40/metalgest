name: Deploy to Hostinger VPS

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build Application
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Build Frontend
        run: |
          npm install
          npm run build

      - name: Build Backend
        run: |
          cd backend
          npm install
          npm run build

      - name: Upload Frontend Artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: dist

      - name: Upload Backend Artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-dist
          path: backend/dist

  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Download Frontend Artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist

      - name: Download Backend Artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-dist
          path: backend/dist

      - name: Checkout code for deploy files
        uses: actions/checkout@v4
        with:
          path: source
          
      - name: Transfer files to VPS
        uses: appleboy/scp-action@master
        with:
          host: 82.25.69.57
          username: root
          password: ${{ secrets.VPS_PASSWORD }}
          source: "source/Dockerfile,source/docker-compose.yml,source/nginx.conf,source/nginx-initial.conf,source/ssl-renewal.sh,source/backend/package.json,source/backend/prisma,frontend/dist,backend/dist"
          target: "/var/www/metalgest"
          strip_components: 1

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: 82.25.69.57
          username: root
          password: ${{ secrets.VPS_PASSWORD }}
          script: |
            cd /var/www/metalgest
            
            # Set default values if secrets are not defined
            DB_NAME="${{ secrets.DB_NAME }}"
            DB_USER="${{ secrets.DB_USER }}"
            DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
            JWT_SECRET="${{ secrets.JWT_SECRET }}"
            JWT_REFRESH_SECRET="${{ secrets.JWT_REFRESH_SECRET }}"
            
            # Use defaults if secrets are empty
            DB_NAME=${DB_NAME:-"metalgest"}
            DB_USER=${DB_USER:-"postgres"}
            DB_PASSWORD=${DB_PASSWORD:-"postgres123"}
            JWT_SECRET=${JWT_SECRET:-"your-super-secret-jwt-key-change-in-production"}
            JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET:-"your-super-secret-refresh-jwt-key-change-in-production"}
            
            # Create environment file
            echo "Creating .env file..."
            echo "NODE_ENV=production" > .env
            echo "PORT=8080" >> .env
            echo "API_VERSION=v1" >> .env
            echo "JWT_SECRET=${JWT_SECRET}" >> .env
            echo "JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}" >> .env
            echo "DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}" >> .env
            echo "POSTGRES_DB=${DB_NAME}" >> .env
            echo "POSTGRES_USER=${DB_USER}" >> .env
            echo "POSTGRES_PASSWORD=${DB_PASSWORD}" >> .env
            
            echo "Environment file created successfully"
            echo "Database config: ${DB_USER}@db:5432/${DB_NAME}"
            
            # Update nginx config
            sed -i "s/PORT_PLACEHOLDER/8080/g" nginx-initial.conf
            cp nginx-initial.conf nginx.conf
            
            # Clean up
            systemctl stop nginx || true
            docker-compose down -v || true
            docker system prune -f || true
            
            # Deploy
            echo "=== Deploying application ==="
            docker-compose up -d --build
            
            # Run Prisma migrations
            echo "=== Running Prisma migrations ==="
            docker-compose exec -T backend npx prisma migrate deploy || echo "Prisma migrations failed or not needed"
            
            # Wait for services to be ready
            echo "Waiting for database to be ready..."
            sleep 20
            
            # Check backend logs for debugging
            echo "=== Backend Container Logs ==="
            docker-compose logs backend --tail=20
            
            # Wait for backend to be ready
            echo "Waiting for backend to be ready..."
            for i in {1..30}; do
              if docker-compose exec -T backend node -e "console.log('Backend is ready')" 2>/dev/null; then
                echo "✅ Backend container is responsive after ${i} attempts"
                break
              fi
              echo "Backend not ready, attempt ${i}/30..."
              sleep 5
            done
            
            # Try to connect to backend port directly
            echo "Testing backend port 8080 directly..."
            docker-compose exec -T backend netstat -tlnp | grep 8080 || echo "Port 8080 not listening in backend container"
            
            # Check container status
            echo "=== Container Status ==="
            docker-compose ps
            
            # Check if database is healthy
            if ! docker-compose ps | grep db | grep -q "healthy"; then
              echo "❌ Database not healthy, checking logs..."
              docker-compose logs db --tail=30
              exit 1
            fi
            
            # Test backend directly on port 8080
            echo "Testing backend directly on port 8080..."
            if curl -f http://localhost:8080/api/v1/health; then
              echo "✅ Backend is working on port 8080"
            else
              echo "❌ Backend failed on port 8080, checking all logs..."
              echo "=== Backend Logs ==="
              docker-compose logs backend --tail=50
              echo "=== Environment Variables ==="
              docker-compose exec -T backend printenv | grep -E "(PORT|NODE_ENV|DATABASE_URL)" || echo "No env vars found"
              echo "=== Network Info ==="
              docker-compose exec -T backend netstat -tlnp || echo "netstat not available"
            fi
            
            # Test through nginx on port 80
            echo "Testing through nginx on port 80..."
            if curl -f http://localhost:80/api/v1/health; then
              echo "✅ Deploy successful! API is accessible through nginx"
            else
              echo "❌ Nginx proxy failed, checking all logs..."
              docker-compose logs --tail=50
              exit 1
            fi
