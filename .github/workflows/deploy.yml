name: Deploy Simplificado - VPS 72.60.10.112

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Deploy Completo
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies and build
        run: |
          npm ci
          npm run db:generate
          
          # Build Frontend
          echo "NEXT_PUBLIC_API_URL=http://72.60.10.112:3002" > apps/web/.env.production
          npm run build:web
          
          # Create .env for Backend build
          echo "NODE_ENV=production" > apps/server/.env
          echo "DATABASE_URL=\"postgresql://dummy:dummy@localhost:5432/dummy\"" >> apps/server/.env
          echo "NEXTAUTH_SECRET=\"dummy-secret-for-build\"" >> apps/server/.env
          echo "NEXTAUTH_URL=\"http://72.60.10.112:3002\"" >> apps/server/.env
          echo "JWT_SECRET=\"dummy-jwt-secret-for-build\"" >> apps/server/.env
          echo "NEXT_PUBLIC_API_URL=\"http://72.60.10.112:3002\"" >> apps/server/.env
          
          # Build Backend
          npm run build:server
          
          # Verificar builds
          echo "‚úÖ Frontend build:"
          ls -la apps/web/dist/
          echo "‚úÖ Backend build:"
          ls -la apps/server/.next/

      - name: Install sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass

      - name: Deploy to VPS
        env:
          VPS_PASSWORD: ${{ secrets.VPS_PASSWORD }}
        run: |
          # Configurar vari√°veis
          VPS_HOST="72.60.10.112"
          VPS_USER="root"
          DEPLOY_PATH="/var/www/metalgest"
          
          echo "üöÄ Iniciando deploy para VPS ${VPS_HOST}:3002"
          
          # Fun√ß√£o para executar comandos SSH
          ssh_exec() {
            sshpass -p "$VPS_PASSWORD" ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null "$VPS_USER@$VPS_HOST" "$1"
          }
          
          # Fun√ß√£o para copiar arquivos
          scp_copy() {
            sshpass -p "$VPS_PASSWORD" scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -r "$1" "$VPS_USER@$VPS_HOST:$2"
          }
          
          # 1. Preparar diret√≥rios na VPS
          echo "üìÅ Preparando diret√≥rios na VPS..."
          ssh_exec "mkdir -p $DEPLOY_PATH && cd $DEPLOY_PATH && rm -rf * .* 2>/dev/null || true"
          
          # 2. Copiar arquivos essenciais
          echo "üì¶ Copiando arquivos para VPS..."
          scp_copy "docker-compose.yml" "$DEPLOY_PATH/"
          scp_copy "Dockerfile.backend" "$DEPLOY_PATH/"
          scp_copy "Dockerfile.frontend" "$DEPLOY_PATH/"
          scp_copy "package.json" "$DEPLOY_PATH/"
          scp_copy "turbo.json" "$DEPLOY_PATH/"
          scp_copy "entrypoint.sh" "$DEPLOY_PATH/"
          scp_copy "rollback.sh" "$DEPLOY_PATH/"
          scp_copy "nginx/" "$DEPLOY_PATH/"
          scp_copy "apps/" "$DEPLOY_PATH/"
          scp_copy "packages/" "$DEPLOY_PATH/"
          
          # 3. Instalar Docker na VPS (se necess√°rio)
          echo "üê≥ Verificando Docker na VPS..."
          ssh_exec "
            if ! command -v docker &> /dev/null; then
              echo 'üì• Instalando Docker...'
              apt-get update -y
              curl -fsSL https://get.docker.com -o get-docker.sh
              sh get-docker.sh
              systemctl enable docker
              systemctl start docker
              rm get-docker.sh
            fi
            
            if ! command -v docker-compose &> /dev/null; then
              echo 'üì• Instalando Docker Compose...'
              curl -L \"https://github.com/docker/compose/releases/latest/download/docker-compose-\$(uname -s)-\$(uname -m)\" -o /usr/local/bin/docker-compose
              chmod +x /usr/local/bin/docker-compose
              ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose
            fi
            
            echo '‚úÖ Docker e Docker Compose instalados:'
            docker --version
            docker-compose --version
          "
          
          # 4. Configurar ambiente e fazer deploy
          echo "‚öôÔ∏è Configurando ambiente e fazendo deploy..."
          ssh_exec "
            cd $DEPLOY_PATH
            
            # Criar arquivo .env
            cat > .env << EOF
          NODE_ENV=production
          DATABASE_URL=postgresql://postgres:postgres123@db:5432/metalgest
          NEXTAUTH_URL=http://72.60.10.112:3002
          NEXTAUTH_SECRET=metalgest-secret-key-production-$(date +%s)
          JWT_SECRET=metalgest-jwt-secret-production-$(date +%s)
          POSTGRES_DB=metalgest
          POSTGRES_USER=postgres
          POSTGRES_PASSWORD=postgres123
          NEXT_PUBLIC_API_URL=http://72.60.10.112:3002
          EOF
            
            echo '‚úÖ Arquivo .env criado'
            
            # Parar containers existentes
            echo 'üõë Parando containers existentes...'
            docker-compose down -v 2>/dev/null || true
            docker system prune -f 2>/dev/null || true
            
            # Tornar scripts execut√°veis
            chmod +x entrypoint.sh rollback.sh
            
            # Fazer backup
            echo 'üíæ Criando backup...'
            TIMESTAMP=\$(date +\"%Y%m%d_%H%M%S\")
            mkdir -p /var/www/metalgest-backup
            cp -r $DEPLOY_PATH /var/www/metalgest-backup/deploy-\$TIMESTAMP
            
            # Iniciar servi√ßos
            echo 'üöÄ Iniciando servi√ßos...'
            
            # Banco de dados primeiro
            echo 'üóÑÔ∏è Iniciando banco de dados...'
            docker-compose up -d db
            
            # Aguardar banco ficar saud√°vel
            echo '‚è≥ Aguardando banco de dados...'
            for i in {1..30}; do
              if docker-compose ps db | grep -q \"healthy\"; then
                echo \"‚úÖ Banco de dados pronto ap√≥s \$i tentativas\"
                break
              fi
              echo \"Tentativa \$i/30...\"
              sleep 3
            done
            
            # Backend
            echo 'üîß Iniciando backend...'
            docker-compose up -d --build backend
            
            # Aguardar backend
            echo '‚è≥ Aguardando backend...'
            for i in {1..60}; do
              if curl -s -f http://localhost:3000/api/health >/dev/null 2>&1; then
                echo \"‚úÖ Backend pronto ap√≥s \$i tentativas\"
                break
              fi
              echo \"Tentativa \$i/60...\"
              sleep 5
            done
            
            # Frontend e Nginx
            echo 'üåê Iniciando frontend e nginx...'
            docker-compose up -d --build frontend nginx
            
            # Aguardar aplica√ß√£o completa
            echo '‚è≥ Aguardando aplica√ß√£o completa...'
            sleep 15
            
            # Testes finais
            echo 'üß™ Testando aplica√ß√£o...'
            
            echo \"Status dos containers:\"
            docker-compose ps
            
            if curl -s -f http://localhost:3002/api/health >/dev/null 2>&1; then
              echo \"‚úÖ Aplica√ß√£o funcionando em http://72.60.10.112:3002\"
              echo \"‚úÖ API health check: OK\"
            else
              echo \"‚ùå Falha no health check\"
              echo \"Logs do backend:\"
              docker-compose logs backend --tail=10
              echo \"Logs do nginx:\"
              docker-compose logs nginx --tail=10
              exit 1
            fi
            
            echo \"\"
            echo \"üéâ DEPLOY CONCLU√çDO COM SUCESSO!\"
            echo \"üåê Aplica√ß√£o dispon√≠vel em: http://72.60.10.112:3002\"
            echo \"üìä Health check: http://72.60.10.112:3002/api/health\"
            echo \"\"
          "
          
          echo "‚úÖ Deploy finalizado com sucesso!"