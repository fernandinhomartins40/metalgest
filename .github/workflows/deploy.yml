name: Deploy to Hostinger VPS

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build Application
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Build Frontend
        run: |
          npm install
          npm run build

      - name: Build Backend
        run: |
          cd backend
          npm install
          npm run build
          # Verificar se o build foi criado
          echo "Verificando backend/dist:"
          ls -la dist/ || echo "ERRO: Backend dist não foi criado!"

      - name: Upload Frontend Artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: dist

      - name: Upload Backend Artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-dist
          path: backend/dist

  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Download Frontend Artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist

      - name: Download Backend Artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-dist
          path: backend/dist

      - name: Checkout code for deploy files
        uses: actions/checkout@v4
        with:
          path: source
          
      - name: Transfer files to VPS
        uses: appleboy/scp-action@master
        with:
          host: 31.97.85.98
          username: root
          password: ${{ secrets.VPS_PASSWORD }}
          source: "source/Dockerfile,source/docker-compose.yml,source/nginx.conf,source/nginx-initial.conf,source/ssl-renewal.sh,source/backend/package.json,source/backend/prisma,frontend/dist,backend/dist"
          target: "/var/www/metalgest"
          strip_components: 1
          debug: true
          
      - name: Ensure backend structure
        uses: appleboy/ssh-action@master
        with:
          host: 31.97.85.98
          username: root
          password: ${{ secrets.VPS_PASSWORD }}
          script: |
            cd /var/www/metalgest
            
            # Verifica e cria estrutura do backend se necessário
            echo "=== Verificando estrutura inicial ==="
            echo "Conteúdo da pasta atual:"
            ls -la
            echo ""
            echo "Estrutura de diretórios:"
            find . -type d -name "*dist*" -o -name "backend" -o -name "frontend" 2>/dev/null || echo "Nenhum diretório dist/backend/frontend encontrado"
            echo ""
            
            # Criar estrutura backend se não existir
            mkdir -p backend
            
            # Verifica se backend/dist existe
            if [ ! -d "backend/dist" ]; then
              echo "⚠️ backend/dist não encontrado, verificando alternativas..."
              
              # Procurar por arquivos dist em qualquer lugar
              if [ -d "dist" ]; then
                echo "✓ Encontrado dist na raiz, movendo para backend/"
                mv dist backend/
              elif find . -name "*.js" -path "*/dist/*" | head -1 | grep -q .; then
                echo "✓ Encontrados arquivos JS compilados, organizando estrutura..."
                # Mover todos os arquivos dist encontrados para backend/dist
                find . -name "dist" -type d | while read distdir; do
                  if [ "$distdir" != "./backend/dist" ]; then
                    echo "Movendo $distdir para backend/"
                    mkdir -p backend/dist
                    cp -r "$distdir"/* backend/dist/ 2>/dev/null || true
                  fi
                done
              else
                echo "❌ ERRO: Nenhum arquivo compilado encontrado!"
                echo "Listando todos os arquivos JavaScript encontrados:"
                find . -name "*.js" | head -10
                exit 1
              fi
            fi
            
            # Verifica se frontend/dist existe e move para raiz
            if [ ! -d "dist" ] && [ -d "frontend/dist" ]; then
              echo "✓ Movendo frontend/dist para raiz"
              mv frontend/dist .
            fi
            
            echo ""
            echo "=== Estrutura final verificada ==="
            echo "Backend structure:"
            ls -la backend/ 2>/dev/null || echo "❌ Backend folder not found"
            echo "Backend dist contents:"
            ls -la backend/dist/ 2>/dev/null || echo "❌ Backend dist not found"
            echo "Frontend dist (root):"
            ls -la dist/ 2>/dev/null || echo "❌ Frontend dist not found"
            echo ""
            
            # Verificação final obrigatória
            if [ ! -f "backend/dist/index.js" ]; then
              echo "❌ ERRO CRÍTICO: backend/dist/index.js não encontrado!"
              echo "O deploy não pode continuar sem o backend compilado."
              exit 1
            else
              echo "✅ backend/dist/index.js encontrado - estrutura OK"
            fi

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: 31.97.85.98
          username: root
          password: ${{ secrets.VPS_PASSWORD }}
          script: |
            cd /var/www/metalgest
            
            # === Install Docker and Docker Compose ===
            echo "=== Installing Docker and Docker Compose ==="
            
            # Update system
            apt-get update -y
            
            # Install Docker if not present
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              curl -fsSL https://get.docker.com -o get-docker.sh
              sh get-docker.sh
              systemctl enable docker
              systemctl start docker
              rm get-docker.sh
            else
              echo "✅ Docker already installed"
            fi
            
            # Install Docker Compose if not present
            if ! command -v docker-compose &> /dev/null; then
              echo "Installing Docker Compose..."
              curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              chmod +x /usr/local/bin/docker-compose
              ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose
            else
              echo "✅ Docker Compose already installed"
            fi
            
            # Verify installations
            docker --version
            docker-compose --version
            
            # === Configure Environment Variables ===
            echo "=== Configuring Environment ==="
            
            # Set default values if secrets are not defined
            DB_NAME="${{ secrets.DB_NAME }}"
            DB_USER="${{ secrets.DB_USER }}"
            DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
            JWT_SECRET="${{ secrets.JWT_SECRET }}"
            JWT_REFRESH_SECRET="${{ secrets.JWT_REFRESH_SECRET }}"
            
            # Use defaults if secrets are empty
            DB_NAME=${DB_NAME:-"metalgest"}
            DB_USER=${DB_USER:-"postgres"}
            DB_PASSWORD=${DB_PASSWORD:-"postgres123"}
            JWT_SECRET=${JWT_SECRET:-"your-super-secret-jwt-key-change-in-production"}
            JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET:-"your-super-secret-refresh-jwt-key-change-in-production"}
            
            # Create environment file
            echo "Creating .env file..."
            cat > .env << EOF
            NODE_ENV=production
            PORT=3006
            API_VERSION=v1
            JWT_SECRET=${JWT_SECRET}
            JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
            DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
            CORS_ORIGIN=*
            POSTGRES_DB=${DB_NAME}
            POSTGRES_USER=${DB_USER}
            POSTGRES_PASSWORD=${DB_PASSWORD}
            ENCRYPTION_KEY=your-encryption-key-32-characters-long
            EOF
            
            echo "✅ Environment file created successfully"
            echo "Database config: ${DB_USER}@db:5432/${DB_NAME}"
            
            # === Setup Nginx Configuration ===
            echo "=== Setting up Nginx ==="
            if [ -f nginx-initial.conf ]; then
              sed -i "s/PORT_PLACEHOLDER/3006/g" nginx-initial.conf
              cp nginx-initial.conf nginx.conf
              echo "✅ Nginx configuration updated"
            else
              echo "⚠️ nginx-initial.conf not found, using default nginx.conf"
            fi
            
            # === Clean Up Previous Deployment ===
            echo "=== Cleaning up previous deployment ==="
            
            # Stop and remove containers
            docker-compose down -v 2>/dev/null || echo "No containers to stop"
            
            # Remove unused images and volumes
            docker system prune -f 2>/dev/null || echo "Docker cleanup completed"
            
            # Stop system nginx if running
            systemctl stop nginx 2>/dev/null || echo "System nginx not running"
            
            # === Deploy Application ===
            echo "=== Deploying application ==="
            
            # Build and start containers (database first)
            echo "Starting database..."
            docker-compose up -d db
            
            # Wait for database using docker-compose health check
            echo "=== Waiting for database ==="
            for i in {1..30}; do
              if docker-compose ps db | grep -q "healthy"; then
                echo "✅ Database is healthy after ${i} attempts"
                break
              fi
              echo "Database not healthy yet, attempt ${i}/30..."
              sleep 3
            done
            
            # Verify database is really ready
            if ! docker-compose ps db | grep -q "healthy"; then
              echo "❌ Database failed to start, checking logs..."
              docker-compose logs db --tail=30
              exit 1
            fi
            
            # Now start backend
            echo "Starting backend..."
            docker-compose up -d --build backend
            
            # === Run Database Migrations ===
            echo "=== Running Prisma migrations ==="
            
            # Wait for backend container to be running
            sleep 15
            
            # Generate and deploy Prisma migrations
            if docker-compose exec -T backend npx prisma migrate deploy 2>/dev/null; then
              echo "✅ Prisma migrations completed successfully"
            else
              echo "⚠️ Prisma migrations failed, trying db push..."
              if docker-compose exec -T backend npx prisma db push --force-reset 2>/dev/null; then
                echo "✅ Database schema pushed successfully"
              else
                echo "❌ Database migration failed completely"
                docker-compose logs backend --tail=20
              fi
            fi
            
            # Wait for backend to be healthy
            echo "=== Waiting for backend to be healthy ==="
            for i in {1..40}; do
              if docker-compose ps backend | grep -q "healthy"; then
                echo "✅ Backend is healthy after ${i} attempts"
                break
              fi
              echo "Backend not healthy yet, attempt ${i}/40..."
              sleep 5
            done
            
            # Finally start nginx
            echo "Starting nginx..."
            docker-compose up -d nginx
            
            # === Final Health Checks ===
            echo "=== Final Health Checks ==="
            
            # Wait a bit for nginx to be ready
            sleep 10
            
            # Show final container status
            echo "Container Status:"
            docker-compose ps
            
            # Test application through nginx
            echo "=== Testing Application ==="
            
            # Try multiple endpoints to ensure everything works
            if curl -f http://localhost:80/api/v1/health 2>/dev/null; then
              echo "✅ API Health Check - OK"
            else
              echo "❌ API Health Check - FAILED"
              echo "Backend logs:"
              docker-compose logs backend --tail=10
              echo "Nginx logs:"
              docker-compose logs nginx --tail=10
              exit 1
            fi
            
            # Final success message
            echo ""
            echo "🎉 DEPLOY SUCCESSFUL!"
            echo "🌐 Application is available at: http://31.97.85.98"
            echo "📊 API endpoint: http://31.97.85.98/api/v1/health"
            echo ""
            echo "📋 Services Status:"
            docker-compose ps --format "table {{.Name}}\t{{.State}}\t{{.Status}}"
