name: Deploy to Hostinger VPS

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build Application
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Build Frontend
        run: |
          npm install
          npm run build

      - name: Build Backend
        run: |
          cd backend
          npm install
          npm run build

      - name: Upload Frontend Artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: dist

      - name: Upload Backend Artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-dist
          path: backend/dist

  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Download Frontend Artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist

      - name: Download Backend Artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-dist
          path: backend/dist

      - name: Checkout code for deploy files
        uses: actions/checkout@v4
        with:
          path: source
          
      - name: Transfer files to VPS
        uses: appleboy/scp-action@master
        with:
          host: 82.25.69.57
          username: root
          password: ${{ secrets.VPS_PASSWORD }}
          source: "source/Dockerfile,source/docker-compose.yml,source/nginx.conf,source/nginx-initial.conf,source/ssl-renewal.sh,source/backend,frontend/dist,backend/dist"
          target: "/var/www/metalgest"
          strip_components: 1

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: 82.25.69.57
          username: root
          password: ${{ secrets.VPS_PASSWORD }}
          script: |
            cd /var/www/metalgest
            
            # Create environment file
            cat > .env << EOF
            NODE_ENV=production
            PORT=3006
            API_VERSION=v1
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}
            DATABASE_URL=postgresql://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@db:5432/${{ secrets.DB_NAME }}
            POSTGRES_DB=${{ secrets.DB_NAME }}
            POSTGRES_USER=${{ secrets.DB_USER }}
            POSTGRES_PASSWORD=${{ secrets.DB_PASSWORD }}
            EOF
            
            # Update nginx config
            sed -i "s/PORT_PLACEHOLDER/3006/g" nginx-initial.conf
            cp nginx-initial.conf nginx.conf
            
            # Clean up
            systemctl stop nginx || true
            docker-compose down -v || true
            docker system prune -f || true
            
            # Deploy
            echo "=== Deploying application ==="
            docker-compose up -d --build
            
            # Wait and test
            echo "Waiting for services..."
            sleep 45
            
            # Detailed health check
            echo "=== Health Check ==="
            docker-compose ps
            
            # Check if containers are running
            if ! docker-compose ps | grep -q "Up"; then
              echo "❌ Containers not running, checking logs..."
              docker-compose logs --tail=50
              exit 1
            fi
            
            # Check nginx is listening on port 80
            if ! netstat -tlnp | grep :80; then
              echo "❌ Port 80 not listening, checking nginx logs..."
              docker-compose logs nginx --tail=30
              exit 1
            fi
            
            # Test backend directly on port 3006
            echo "Testing backend directly on port 3006..."
            if curl -f http://localhost:3006/api/v1/health; then
              echo "✅ Backend is working on port 3006"
            else
              echo "❌ Backend failed on port 3006, checking backend logs..."
              docker-compose logs backend --tail=30
            fi
            
            # Test through nginx on port 80
            echo "Testing through nginx on port 80..."
            if curl -f http://localhost:80/api/v1/health; then
              echo "✅ Deploy successful! API is accessible through nginx"
            else
              echo "❌ Nginx proxy failed, checking all logs..."
              docker-compose logs --tail=50
              exit 1
            fi
