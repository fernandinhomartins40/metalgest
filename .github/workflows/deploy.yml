name: Deploy MetalGest - Node.js + SQLite - VPS 72.60.10.112

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Deploy Completo
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies and build
        run: |
          # Build Frontend
          cd apps/web
          echo "VITE_API_URL=http://72.60.10.112:3010/api" > .env.production
          npm ci
          npm run build
          
          # Verificar builds
          echo "✅ Frontend build:"
          ls -la dist/
          echo "✅ Backend files:"
          cd ../../
          ls -la backend/

      - name: Install sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass

      - name: Deploy to VPS
        env:
          VPS_PASSWORD: ${{ secrets.VPS_PASSWORD }}
        run: |
          # Configurar variáveis
          VPS_HOST="72.60.10.112"
          VPS_USER="root"
          DEPLOY_PATH="/var/www/metalgest"
          
          echo "🚀 Iniciando deploy para VPS ${VPS_HOST}:3010"
          
          # Função para executar comandos SSH
          ssh_exec() {
            sshpass -p "$VPS_PASSWORD" ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=30 -o ServerAliveInterval=60 -o ServerAliveCountMax=10 "$VPS_USER@$VPS_HOST" "$1"
          }
          
          # Função para copiar arquivos
          scp_copy() {
            sshpass -p "$VPS_PASSWORD" scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=30 -r "$1" "$VPS_USER@$VPS_HOST:$2"
          }
          
          # 1. Preparar diretórios na VPS
          echo "📁 Preparando diretórios na VPS..."
          if ! ssh_exec "mkdir -p $DEPLOY_PATH && cd $DEPLOY_PATH && rm -rf * .* 2>/dev/null || true && mkdir -p frontend backend nginx"; then
            echo "❌ Erro ao preparar diretórios"
            exit 1
          fi
          echo "✅ Diretórios preparados"
          
          # 2. Copiar arquivos essenciais
          echo "📦 Copiando arquivos para VPS..."
          
          echo "📦 Copiando arquivos de configuração..."
          if ! scp_copy "docker-compose.yml" "$DEPLOY_PATH/"; then
            echo "❌ Erro ao copiar docker-compose.yml"
            exit 1
          fi
          
          echo "📦 Copiando Dockerfiles..."
          if ! scp_copy "Dockerfile.frontend" "$DEPLOY_PATH/"; then
            echo "❌ Erro ao copiar Dockerfile.frontend"
            exit 1
          fi
          
          if ! scp_copy "Dockerfile.backend" "$DEPLOY_PATH/"; then
            echo "❌ Erro ao copiar Dockerfile.backend"
            exit 1
          fi
          
          echo "📦 Copiando nginx..."
          if ! scp_copy "nginx/" "$DEPLOY_PATH/"; then
            echo "❌ Erro ao copiar nginx"
            exit 1
          fi
          
          echo "📦 Copiando código fonte..."
          if ! scp_copy "apps/" "$DEPLOY_PATH/"; then
            echo "❌ Erro ao copiar apps"
            exit 1
          fi
          
          if ! scp_copy "backend/" "$DEPLOY_PATH/"; then
            echo "❌ Erro ao copiar backend"
            exit 1
          fi
          
          echo "📦 Copiando arquivos package..."
          if ! scp_copy "package.json" "$DEPLOY_PATH/"; then
            echo "❌ Erro ao copiar package.json"
            exit 1
          fi
          
          if ! scp_copy "package-lock.json" "$DEPLOY_PATH/" 2>/dev/null || true; then
            echo "⚠️  package-lock.json não encontrado (opcional)"
          fi
          
          echo "✅ Arquivos copiados com sucesso"
          
          # 3. Instalar Docker e Docker Compose na VPS (se necessário)
          echo "📦 Verificando Docker na VPS..."
          ssh_exec "
            if ! command -v docker &> /dev/null; then
              echo '📥 Instalando Docker...'
              apt-get update -y
              apt-get install -y ca-certificates curl gnupg lsb-release
              mkdir -p /etc/apt/keyrings
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
              echo \"deb [arch=\$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \$(lsb_release -cs) stable\" | tee /etc/apt/sources.list.d/docker.list > /dev/null
              apt-get update -y
              apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
              systemctl enable docker
              systemctl start docker
            fi
            
            if ! command -v docker-compose &> /dev/null; then
              echo '📥 Instalando Docker Compose...'
              curl -L \"https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-\$(uname -s)-\$(uname -m)\" -o /usr/local/bin/docker-compose
              chmod +x /usr/local/bin/docker-compose
            fi
            
            echo '✅ Ferramentas instaladas:'
            docker --version
            docker-compose --version
          "
          
          # 4. Preparar ambiente
          echo "📝 Criando arquivos de ambiente..."
          ssh_exec "cd $DEPLOY_PATH && cat > .env << 'EOF'
          NODE_ENV=production
          JWT_SECRET=metalgest-jwt-secret-production-$(date +%s)
          REFRESH_TOKEN_SECRET=metalgest-refresh-secret-production-$(date +%s)
          FRONTEND_URL=http://72.60.10.112:3010
          VITE_API_URL=http://72.60.10.112:3010/api
          EOF"
          
          # 5. Parar containers existentes
          echo "🛑 Parando containers existentes..."
          ssh_exec "cd $DEPLOY_PATH && docker-compose down --remove-orphans 2>/dev/null || true"
          
          # 6. Fazer backup
          echo "💾 Criando backup..."
          ssh_exec "
            TIMESTAMP=\$(date +\"%Y%m%d_%H%M%S\")
            mkdir -p /var/www/metalgest-backup
            if [ -d \"/var/www/metalgest-backup/deploy-current\" ]; then
              mv /var/www/metalgest-backup/deploy-current /var/www/metalgest-backup/deploy-\$TIMESTAMP
            fi
            cp -r $DEPLOY_PATH /var/www/metalgest-backup/deploy-current
          "
          
          # 7. Build containers
          echo "🔧 Construindo containers..."
          ssh_exec "cd $DEPLOY_PATH && docker-compose build"
          
          # 8. Iniciar containers
          echo "🚀 Iniciando containers..."
          ssh_exec "cd $DEPLOY_PATH && docker-compose up -d"
          
          # 9. Aguardar containers
          echo "⏳ Aguardando containers..."
          ssh_exec "
            for i in {1..60}; do
              if curl -s -f http://localhost:3010/api/health >/dev/null 2>&1; then
                echo \"✅ Aplicação pronta após \$i tentativas\"
                break
              fi
              echo \"Tentativa \$i/60...\"
              sleep 5
            done
          "
          
          # 10. Verificar status
          echo "📋 Verificando status dos containers..."
          ssh_exec "cd $DEPLOY_PATH && docker-compose ps"
          
          # 11. Teste final
          echo "🧪 Testando aplicação..."
          ssh_exec "
            if curl -s -f http://localhost:3010/api/health >/dev/null 2>&1; then
              echo \"✅ Aplicação funcionando em http://72.60.10.112:3010\"
              echo \"✅ API health check: OK\"
              echo \"🎉 DEPLOY CONCLUÍDO COM SUCESSO!\"
              echo \"🌐 Aplicação disponível em: http://72.60.10.112:3010\"
              echo \"📊 Health check: http://72.60.10.112:3010/api/health\"
            else
              echo \"❌ Falha no health check\"
              docker-compose logs --tail=20
              exit 1
            fi
          "
          
          echo "✅ Deploy finalizado com sucesso!"